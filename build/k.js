// Fichier : script.js
// Description : Syst√®me de gestion int√©gr√© de t√¢ches, de ressources et de redistribution √©conomique

/**
 * Classe MandatoryAi - Gestion des t√¢ches, unit√©s de temps et de capacit√©
 */
class MandatoryAi {
    constructor() {
        this.timeUnits = []; // UTM (Unit√©s de Temps Mon√©tisables)
        this.capacityUnits = []; // UCM (Unit√©s de Capacit√© Mon√©tisables)
        this.dailyTasks = [];
        this.tva = 0;
    }

    /**
     * Ajoute une t√¢che quotidienne avec une estimation de temps et une valeur
     * @param {string} task - Nom de la t√¢che
     * @param {number} timeEstimate - Temps estim√© en heures
     * @param {number} value - Valeur de la t√¢che
     * @throws {Error} Si les param√®tres sont invalides
     */
    addTask(task, timeEstimate, value) {
        if (typeof task !== 'string' || typeof timeEstimate !== 'number' || typeof value !== 'number') {
            throw new Error('Param√®tres invalides');
        }
        if (timeEstimate <= 0 || value <= 0) {
            throw new Error('Estimation de temps ou valeur doit √™tre positive');
        }
        this.dailyTasks.push({ task, timeEstimate, value });
        this.timeUnits.push({ task, units: timeEstimate * value, type: 'UTM' });
    }

    /**
     * G√©n√®re des UCM bas√©es sur des comp√©tences ou contributions sp√©cifiques
     * @param {string} skill - Comp√©tence ou skill
     * @param {number} contributionValue - Valeur de la contribution
     * @throws {Error} Si les param√®tres sont invalides
     */
    generateUCM(skill, contributionValue) {
        if (typeof skill !== 'string' || typeof contributionValue !== 'number') {
            throw new Error('Param√®tres invalides');
        }
        if (contributionValue <= 0) {
            throw new Error('Valeur de contribution doit √™tre positive');
        }
        this.capacityUnits.push({ skill, units: contributionValue, type: 'UCM' });
    }

    /**
     * Calculer la TVA bas√©e sur les ventes
     * @param {number} sales - Montant des ventes
     * @returns {number} - TVA calcul√©e
     * @throws {Error} Si les param√®tres sont invalides
     */
    calculateTVA(sales) {
        if (typeof sales !== 'number' || sales < 0) {
            throw new Error('Param√®tres invalides');
        }
        this.tva = sales * 0.20; // Exemple : 20% de TVA sur les ventes
        return this.tva;
    }

    /**
     * Synchroniser les donn√©es avec le smart contract pour la transparence
     * @returns {Promise<object>} - Donn√©es synchronis√©es
     */
    async syncWithBlockchain() {
        try {
            console.log('‚è≥ Envoi des UTM et UCM pour validation et enregistrement sur la blockchain...');
            return {
                utm: this.timeUnits,
                ucm: this.capacityUnits,
                tva: this.tva
            };
        } catch (error) {
            console.error('‚ùå Erreur lors de la synchronisation avec la blockchain:', error);
            throw error;
        }
    }

    /**
     * Rapport quotidien
     */
    dailyReport() {
        console.log('=== üìä Rapport Quotidien ===');
        console.log('üìå T√¢ches quotidiennes :', this.dailyTasks);
        console.log('‚è≥ UTM g√©n√©r√©es :', this.timeUnits);
        console.log('üí™ UCM g√©n√©r√©es :', this.capacityUnits);
        console.log('üí∞ TVA collect√©e :', this.tva);
    }
}

/**
 * Classe GenerousTresor - Gestion de la redistribution √©conomique
 */
class GenerousTresor {
    constructor() {
        this.tresor = 0;
        this.donations = [];
    }

    /**
     * Redistribuer la TVA collect√©e
     */
    redistributeTVA(tva, utm, ucm) {
        if (typeof tva !== 'number' || tva < 0 || !Array.isArray(utm) || !Array.isArray(ucm)) {
            throw new Error('Param√®tres invalides');
        }

        const totalUTM = utm.reduce((acc, curr) => acc + curr.units, 0);
        const totalUCM = ucm.reduce((acc, curr) => acc + curr.units, 0);
        let generosity = (totalUTM + totalUCM) / 10;

        if (tva < generosity) {
            console.warn('‚ö†Ô∏è TVA insuffisante pour redistribution compl√®te. Ajustement en cours...');
            generosity = tva; // Redistribuer tout ce qui est disponible
        }

        this.tresor += tva - generosity;
        this.donations.push({ amount: generosity, reason: 'G√©n√©rosit√© bas√©e sur UTM et UCM' });
    }

    /**
     * Rapport de g√©n√©rosit√©
     */
    generosityReport() {
        console.log('=== üéÅ Rapport de G√©n√©rosit√© ===');
        console.log('üí∞ Tr√©sor actuel :', this.tresor);
        console.log('üôè Donations effectu√©es :', this.donations);
    }
}

/**
 * Classe Grok - Syst√®me d'apprentissage et d'analyse
 */
class Grok {
    constructor() {
        this.knowledgeBase = [];
        this.insights = [];
        this.tasks = [];
    }

    learn(newKnowledge) {
        if (typeof newKnowledge !== 'string') {
            throw new Error('La connaissance doit √™tre une cha√Æne de caract√®res');
        }
        this.knowledgeBase.push(newKnowledge);
        console.log(`üìö Nouvelle connaissance ajout√©e : ${newKnowledge}`);
    }

    async integrateWithSystems(ai, tresor) {
        if (!(ai instanceof MandatoryAi) || !(tresor instanceof GenerousTresor)) {
            throw new Error('Instances invalides');
        }
        const newKnowledge = await ai.syncWithBlockchain();
        this.learn(JSON.stringify(newKnowledge));
        console.log('‚úÖ Synchronisation r√©ussie avec les syst√®mes.');
    }
}

// üî• EX√âCUTION DU SCRIPT üî•
(async () => {
    const ai = new MandatoryAi();
    const tresor = new GenerousTresor();
    const grok = new Grok();

    try {
        ai.addTask("Gestion de la boutique Qi.store", 3, 10);
        ai.generateUCM("D√©veloppement de produits", 50);
        const tva = ai.calculateTVA(100);
        ai.dailyReport();

        const blockchainData = await ai.syncWithBlockchain();
        tresor.redistributeTVA(blockchainData.tva, blockchainData.utm, blockchainData.ucm);
        tresor.generosityReport();

        await grok.integrateWithSystems(ai, tresor);
    } catch (error) {
        console.error('‚ùå Erreur lors de l‚Äôex√©cution du script :', error);
    }
})();
